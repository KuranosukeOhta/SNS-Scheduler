---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## HEADERS

## TECH STACK
- Frontend: Next.js (App Router) + TailwindCSS + ShadCnUI
- Backend: Supabase（Auth + DB） or Firebase
- Deployment: Vercel
- 外部連携: Twitter API v2（OAuth 2.0）

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

## CODING STANDARDS

## UI/UX GUIDELINES
- Prioritize intuitive UI design.
- Focus on ease of use for students and faculty.

## WORKFLOW & RELEASE RULES

## DEBUGGING
- When `create-next-app` fails due to npm naming restrictions (e.g., capital letters in the directory name), use a temporary directory to create the project, then move the files to the desired directory.
  1. Create a temporary directory (e.g., `temp-app`).
  2. Create the Next.js project inside the temporary directory: `npx create-next-app@latest temp-app --typescript --tailwind --eslint --app --src-dir --import-alias "@/*"`. When prompted "Would you like to use Turbopack for `next dev`?", select "No" to proceed with the standard setup.
  3. Move the contents of the temporary directory to the desired project directory.
  4. Delete the temporary directory.
- When encountering errors related to `headers()` or `cookies()` within Server Actions, especially the error messages `Route "/login" used headers().get('origin')` or `cookies()` should be awaited before using its value`, refactor the code to separate the Server Actions' logic from the UI components. Move the server actions (e.g., `login`, `signup`, `loginWithGoogle`) to a separate `actions.ts` file and import them into the page component. This helps avoid conflicts with Next.js's rendering and data processing lifecycle.

## TESTING

## SECURITY

## DEPLOYMENT
### Vercelへのデプロイ手順

Vercelへのデプロイは、通常以下の流れで行います。

**1. GitHubリポジトリにプッシュ**
まず、ローカルのコードをGitHub上のリポジトリにプッシュする必要があります。
もし、まだGitHubにこのプロジェクト用のリポジトリを作成していない場合は、[GitHub](https://github.com/new)で新しいリポジトリを作成してください。

作成後、以下のコマンドをお使いのターミナルで実行して、ローカルリポジトリをGitHubに接続し、プッシュします。（`YOUR_USERNAME`と`YOUR_REPOSITORY_NAME`はご自身のものに置き換えてください。）

```bash
# GitHubリポジトリをリモートとして追加
git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY_NAME.git

# ブランチ名をmainに設定
git branch -M main

# mainブランチにプッシュ
git push -u origin main
```

**2. Vercelでプロジェクトを作成**
1.  [Vercelのダッシュボード](https://vercel.com/dashboard)にアクセスし、「Add New...」>「Project」を選択します。
2.  「Import Git Repository」のセクションで、先ほどプッシュしたGitHubリポジトリを選択し、「Import」をクリックします。

**3. 環境変数の設定**
プロジェクトの設定画面が開いたら、Supabaseのキーを設定する必要があります。
1.  「Environment Variables」のセクションを開きます。
2.  `.env.local` に設定したキーを、以下の名前で1つずつ追加します。
    -   `NEXT_PUBLIC_SUPABASE_URL`
    -   `NEXT_PUBLIC_SUPABASE_ANON_KEY`
3.  値には、ご自身のSupabaseプロジェクトのURLとanonキーを貼り付けます。

**4. デプロイ**
環境変数を設定したら、「Deploy」ボタンをクリックします。
ビルドとデプロイが自動的に開始され、完了すると公開URLが発行されます。

## EXTERNAL API INTEGRATIONS
- Twitter API v2 (OAuth 2.0)

## ERROR HANDLING
- When encountering issues with file editing being blocked, especially with `.env` files, rename the file temporarily, edit it, and then rename it back. This is due to potential tool restrictions.
- When encountering errors related to `headers()` or `cookies()` within Server Actions, especially the error messages `Route "/login" used headers().get('origin')` or `cookies()` should be awaited before using its value`, refactor the code to separate the Server Actions' logic from the UI components. Move the server actions (e.g., `login`, `signup`, `loginWithGoogle`) to a separate `actions.ts` file and import them into the page component. This helps avoid conflicts with Next.js's rendering and data processing lifecycle.
## SUPABASE SETUP
### Supabaseプロジェクトの設定手順

#### ステップ1：Supabaseプロジェクトの作成
1.  [Supabase公式サイト](https://supabase.com/)にアクセスし、アカウント登録またはログインをします。
2.  ダッシュボードで「New Project」ボタンを押し、組織を選択して新しいプロジェクトを作成します。
    -   プロジェクト名（例：`sns-scheduler`）とデータベースのパスワードを設定し、リージョン（例：`Northeast Asia (Tokyo)`）を選択します。

#### ステップ2：APIキーの取得と環境変数の設定
プロジェクトが作成されると、APIキーが発行されます。これをアプリケーションに設定します。

1.  プロジェクトのダッシュボードで、左側のメニューから**Settings**（歯車アイコン）をクリックし、**API**を選択します。
2.  **Project URL** と **Project API Keys** のセクションにある `anon` `public` キーをコピーします。
3.  お使いのPCのプロジェクトフォルダ（`SNS-Scheduler`）に、`.env.local` という名前のファイルを新規作成します。
4.  `.env.local.example` の内容をコピーし、先ほど取得したURLとキーを以下のように貼り付けます。

    **.env.local**
    ```
    NEXT_PUBLIC_SUPABASE_URL="ここにコピーしたProject URLを貼り付け"
    NEXT_PUBLIC_SUPABASE_ANON_KEY="ここにコピーしたanon publicキーを貼り付け"
    ```
    **注意：** `.env.local` ファイルは `.gitignore` によってGitの管理対象外となっているため、キーが外部に漏れることはありません。

#### ステップ3：Supabaseの認証設定
次に、Googleログインを有効にするための設定を行います。

1.  Supabaseのダッシュボードで、左側のメニューから**Authentication**（人型アイコン）をクリックします。
2.  **URL Configuration** を選択し、**Site URL** にローカル開発環境のURL `http://localhost:3000` を設定します。
    -   本番環境にデプロイした後は、そのURL（VercelのURLなど）を追加する必要があります。
3.  次に、**Providers** を選択し、リストの中から **Google** をクリックして設定を開きます。

#### ステップ4：Google Cloud PlatformでのOAuth設定
SupabaseでGoogle認証を有効にするには、Google Cloud Platform (GCP) でOAuthのクライアントIDとシークレットを取得する必要があります。

1.  [Google Cloud Console](https://console.cloud.google.com/)にアクセスし、新しいプロジェクトを作成します。
2.  左上のメニューから「APIとサービス」>「認証情報」を選択します。
3.  「＋認証情報を作成」をクリックし、「OAuthクライアントID」を選択します。
4.  「アプリケーションの種類」で「ウェブ アプリケーション」を選択します。
5.  「承認済みのリダイレクトURI」の「＋URIを追加」ボタンを押します。ここに、**前のステップ（ステップ3-3）でSupabaseのGoogleプロバイダー設定画面に表示されていた「Redirect URL」**（`https://<project-ref>.supabase.co/auth/v1/callback`のような形式です）を貼り付けます。
6.  作成ボタンを押すと、「クライアントID」と「クライアントシークレット」が表示されます。これらをコピーしておきます。

#### ステップ5：SupabaseにGoogleの認証情報を登録
1.  SupabaseのGoogleプロバイダー設定画面に戻ります。
2.  先ほどGCPで取得した「クライアントID」と「クライアントシークレット」をそれぞれ入力します。
3.  **Enable Google** のトグルをオンにして、設定を保存します。

#### ステップ6（推奨）：開発時のメール確認を無効化
メールアドレスとパスワードでのサインアップ機能を開発する際、メール確認のステップを省略するとテストがスムーズになります。

1.  SupabaseのAuthenticationの設定で、**Providers** > **Email** を選択します。
2.  **Confirm email** のトグルをオフにします。
    -   **注意：** 本番リリース前には、セキュリティのため必ずオンに戻してください。

## ROW LEVEL SECURITY (RLS) 設定

SupabaseのテーブルにはRow Level Security (RLS) が設定されており、データへのアクセスを制御します。
`new row violates row-level security policy` エラーは、テーブルへの書き込み権限がない場合に発生します。

**投稿テーブル (`posts`) への書き込みを許可するポリシー設定**

以下の手順に従って、`posts` テーブルへの書き込みを許可するポリシーを設定します。

1. Supabaseプロジェクトのダッシュボードで、**Table Editor** を開きます。
2. `posts` テーブルを選択します。
3. **Policies** タブを開きます。
4. **Create a new policy** ボタンをクリックします。
5. テンプレートから作成ではなく、**Create from scratch** を選択します。
6. ポリシーに名前を付けます（例: `Enable insert for authenticated users`）。
7.  **INSERT** を選択します。
8.  以下のSQL式を **Expression** エディタに入力します。

```sql
auth.uid() = user_id
```

   このSQL式は、「認証されたユーザーのID (`auth.uid()`) が、挿入しようとしている行の `user_id` と一致する場合にのみ、挿入を許可する」という意味です。これにより、ユーザーは自分の `user_id` を持つ投稿しか作成できなくなります。

9. **Save** ボタンをクリックしてポリシーを保存します。
   この設定により、認証されたユーザーは自分の投稿を作成できるようになります。

## TWITTER API
### API利用申請に必要なユースケース説明文
Our application is a social media scheduling tool designed to help users, such as university faculty and student groups, manage their content posting schedule efficiently.

The core functionality allows authenticated users to compose a tweet and schedule it for a future date and time. The application stores this scheduled content and its designated publication time within its own secure database, hosted on Supabase.

A secure, automated backend process (a Supabase Edge Function) runs at regular intervals to check for tweets that are due for publication. When a scheduled time is reached, our application programmatically uses the Twitter API v2, specifically the `POST /2/tweets` endpoint, to publish the user's pre-composed content directly to their connected X account on their behalf.

Our use of the Twitter API is strictly for content creation (write-only). We do not read, retrieve, analyze, or store any other data from the Twitter platform, such as user timelines, direct messages, follower lists, or profile information. The sole purpose of this API integration is to enable our users to post their own content at a time they have chosen.

## CRON JOB
### EasyCronでの設定手順

1.  [EasyCronのサイト](https://www.easycron.com/) にアクセスし、アカウントを登録します。
2.  ダッシュボードで「**+ Create New Cron Job**」ボタンを押します。
3.  以下の情報を入力します。
    -   **Title**:
        `SNS Scheduler Post-Scheduler` のように、分かりやすい名前を入力します。
    -   **URL**:
        ここに、デプロイ済みのSupabase Edge FunctionのURLを入力します。
        `https://<YOUR_PROJECT_REF>.supabase.co/functions/v1/post-scheduler`
    -   **Schedule**:
        実行したいスケジュールを設定します。「Every 1 minute」などが選択できます。
    -   **HTTP Method**:
        `GET` を選択します。
    -   **HTTP Headers**:
        **これが最も重要です。** 「Add HTTP header」をクリックして、ヘッダーを追加します。
        -   一つ目の入力欄（名前）に `Authorization` と入力します。
        -   二つ目の入力欄（値）に `Bearer YOUR_CRON_SECRET` と入力します。`YOUR_CRON_SECRET` の部分は、先ほどSupabaseのシークレットに設定した、ご自身の秘密の文字列に置き換えてください。
        -   **例**: `Bearer FjK9$2!zP@sW*&d`
4.  設定が完了したら、「**Create**」ボタンを押してCron Jobを保存します。

### Supabase Function テスト設定

*   **HTTP Method**
    *   `GET` を選択してください。（コードはどのメソッドでも受け付けますが、`GET`で問題ありません）

*   **Headers**
    *   **Key**: `Authorization`
    *   **Value**: `Bearer b8748bab96620971c33ef990a12de3a1bbd528294b95640ac7d3d8b4c625d53b`
        *   `Bearer` とシークレットキーの間に半角スペースが一つ入ります。
        *   これは、先ほど設定したシークレットキーを使い、「このリクエストは正当な送信元（Cron-job.orgなど）からのものですよ」と証明するためのものです。
        *   **Important:** The Supabase Test UI appears to be misinterpreting the "Authorization: Bearer" format. To test, use a `curl` command.

*   **Query Parameters**
    *   このFunctionはクエリパラメータを使用しないので、何も設定する必要はありません。空のままで大丈夫です。